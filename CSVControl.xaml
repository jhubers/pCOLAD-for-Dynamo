<Window
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"         
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" 
             xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero" x:Class="pCOLADnamespace.CSVControl" 
             xmlns:local="clr-namespace:pCOLADnamespace"
             xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"
             mc:Ignorable="d" 
             SizeToContent="WidthAndHeight" 
             MaxHeight="{DynamicResource {x:Static SystemParameters.MaximizedPrimaryScreenHeightKey}}"
             Top="{DynamicResource {x:Static SystemParameters.VirtualScreenTopKey}}"
             Title="pCOLAD" Closing="Window_Closing" 
    
             >
    <Window.Resources>
        <local:pSHARE x:Key="myDataContext"/>
        <local:BoolToOppositeBoolConverter x:Key="BoolToOppositeBoolConverter"
                                           FalseValue="True"
                                           TrueValue="False" />
        <local:BoolToVisibilityConverter x:Key="BoolToVisibleConverter"
                               FalseValue= "Visible"
                               TrueValue="Hidden" />
        <local:ObjectToForegroundConverter x:Key="MyObjectToForegroundConverter"/>
        <local:testConverter x:Key="myTestConverter"/>
        <local:DataRowToFullPathListConverter x:Key="myDataRowToListConverter"/>
        <local:ObjectToStrikeThroughConverter x:Key="myObjectToStrikeThroughConverter"/>
        <local:ImageTemplateSelector x:Key="myImageTemplateSelector"/>

        <!--<local:BindingProxy x:Key="proxy" Data="{Binding}" />-->
        <Style x:Key="ButtonFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#F3F3F3" Offset="0"/>
            <GradientStop Color="#EBEBEB" Offset="0.5"/>
            <GradientStop Color="#DDDDDD" Offset="0.5"/>
            <GradientStop Color="#CDCDCD" Offset="1"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070"/>
        <Style x:Key="ToggleButtonStyle1" TargetType="{x:Type ToggleButton}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Themes:ButtonChrome x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" RenderDefaulted="{TemplateBinding Button.IsDefaulted}" SnapsToDevicePixels="true">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background)" Storyboard.TargetName="Chrome">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <SolidColorBrush Color="#FF3BE22A"/>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unchecked"/>
                                    <VisualState x:Name="Indeterminate"/>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Themes:ButtonChrome>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="RenderDefaulted" TargetName="Chrome" Value="true"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="RenderPressed" TargetName="Chrome" Value="true"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#ADADAD"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--this sets all datagridcells to not selectable-->
        <Style x:Key="AvoidCellSelection" TargetType="{x:Type DataGridCell}">
            <Setter Property="IsHitTestVisible" Value="False"/>
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type DataGridCell}">
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <DataTemplate x:Key="deletedCells">
            <TextBlock 
            Text="{Binding Mode=OneWay}" 
            TextDecorations="{Binding Converter={StaticResource myObjectToStrikeThroughConverter}, Mode=OneWay}"
            />
        </DataTemplate>
        <DataTemplate x:Key="changedCells">
            <TextBlock 
            Text="{Binding Mode=OneWay}" 
            Background="{Binding Converter={StaticResource MyObjectToForegroundConverter}, Mode=OneWay}"
            />
        </DataTemplate>
        <DataTemplate x:Key="commentCells">
            <TextBox
            Text="{Binding TextValue, Mode=TwoWay}" 
            Background="{Binding Converter={StaticResource MyObjectToForegroundConverter}, Mode=OneWay}"
            />
        </DataTemplate>
        <DataTemplate x:Key="convertedImagePath">
            <ItemsControl ItemsSource="{Binding  Converter={StaticResource myDataRowToListConverter}}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding myImageFileName}"/>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </DataTemplate>

        <!--<DataTemplate x:Key="changedComments" >
            <TextBlock 
            Text="{Binding [Comments],Mode=OneWay}" 
            Background="{Binding [Comments],Converter={StaticResource MyObjectToForegroundConverter},Mode=OneWay}"
            />
        </DataTemplate>
        <DataTemplate x:Key="changedNewValue" >
            <TextBlock 
            Text="{Binding [New Value],Mode=OneWay}" 
            Background="{Binding [New Value],Converter={StaticResource MyObjectToForegroundConverter},Mode=OneWay}"
            />
        </DataTemplate>
        <DataTemplate x:Key="changedImportance">
            <TextBlock
            Text="{Binding [Importance],Mode=OneWay}" 
            Background="{Binding [Importance],Converter={StaticResource MyObjectToForegroundConverter},Mode=OneWay}"
            />
        </DataTemplate>-->
        <DataTemplate x:Key="imagesOn">
            <ItemsControl ItemsSource="{Binding  
                                Converter={StaticResource myDataRowToListConverter}}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate >
                        <Border x:Name="imageBorder1" BorderThickness="1" BorderBrush="Black"                                                
                                                MouseLeave="imageBorder_MouseLeave"
                                                MouseEnter="imageBorder_MouseEnter" Height="16">
                            <!-- try RenderOptions.BitmapScalingMode="LowQuality" if it is too slow -->
                            <Image x:Name="myImage" Source="{Binding MyImagePath}"
                                               MouseUp="Image_MouseUp"  HorizontalAlignment="Center">
                            </Image>
                        </Border>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </DataTemplate>
        <DataTemplate x:Key="imagesOff">
            <!--just empty cells-->
        </DataTemplate>
    </Window.Resources>

    <!--trigger the closing by the red cross top left. Doesn't work. Try with Blend? 
    runs also when you close by code when you hit the Cancel button. So it runs then twice!-->
    <!--<i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            -->
    <!--<i:InvokeCommandAction Command="{Binding CancelCommand}" CommandParameter="{Binding}"/>
            <i:InvokeCommandAction Command="{Binding CancelCommand}"/>-->
    <!--
        </i:EventTrigger>
    </i:Interaction.Triggers>-->
    <Grid AllowDrop="False">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <DataGrid Grid.Row="0" x:Name="myXamlTable" AutoGeneratingColumn="myXamlTable_AutoGeneratingColumn"                   
			CanUserSortColumns="False" CanUserReorderColumns="False" CanUserAddRows="False" Focusable="False"
			CanUserDeleteRows="False" ItemsSource="{Binding MyPropDataTable, Mode=OneWay}"
			CurrentCell="{Binding CellInfo, Mode=TwoWay}" x:FieldModifier="public" 
			SelectedIndex="{Binding RowIndex, Mode=TwoWay}" VerticalAlignment="Top">
            <DataGrid.Columns >
                <DataGridTemplateColumn >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate >
                            <CheckBox x:Name="myCheckBox" Loaded="myCheckBox_Loaded"
								IsChecked="{Binding DataContext.isChecked, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <!--pSHARE.MyImageFolderList contains MyImageFolder.MyImageList contains MyImage.MyImagePath-->

                <!--<DataGridTemplateColumn Header="Images">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <ListBox x:Name="folder" ItemsSource="{Binding DataContext.MyImageFolderList, 
                                Converter={StaticResource myTestConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}}">
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <ListBox x:Name="image" ItemsSource="{Binding MyImageFolder.MyImageList, 
                                Converter={StaticResource myTestConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}}"> 
                                            <ListBox.ItemTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding MyImage.MyImagePath, 
                                Converter={StaticResource myTestConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}}"/>
                                                </DataTemplate>
                                            </ListBox.ItemTemplate>
                                        </ListBox>                                        
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>-->

                <DataGridTemplateColumn x:Name="dgtc">
                    <DataGridTemplateColumn.CellTemplateSelector>
                        <local:ImageTemplateSelector
                            WithImage="{StaticResource imagesOn}"
                            WithoutImage="{StaticResource imagesOff}"/>
                        <!--<DataTemplate>
                            <ItemsControl ItemsSource="{Binding  
                                Converter={StaticResource myDataRowToListConverter}}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate >
                                        <Border x:Name="imageBorder" BorderThickness="1" BorderBrush="Black"   
                                                MouseLeave="imageBorder_MouseLeave"
                                                MouseEnter="imageBorder_MouseEnter" Height="16">
                                            
                                         -->
                        <!--try RenderOptions.BitmapScalingMode="LowQuality" if it is too slow-->
                        <!--

                                            <Image x:Name="myImage" Source="{Binding MyImagePath}" Visibility="{Binding HistoryOn, Converter={StaticResource BoolToVisibleConverter}}"
                                               MouseUp="Image_MouseUp"  HorizontalAlignment="Center">
                                            </Image>
                                        </Border>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </DataTemplate>-->
                    </DataGridTemplateColumn.CellTemplateSelector>
                </DataGridTemplateColumn>


            </DataGrid.Columns>
        </DataGrid>

        <Grid Grid.Row ="1" VerticalAlignment="Bottom" Height="25">
            <Grid.Resources>
                <Style TargetType="Button" x:Key="newTemplate">
                    <Setter Property="Background" Value="#FF1F3B53"/>
                    <Setter Property="Foreground" Value="#FF000000"/>
                    <Setter Property="Padding" Value="3"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="BorderBrush">
                        <Setter.Value>
                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                <GradientStop Color="#FFA3AEB9" Offset="0"/>
                                <GradientStop Color="#FF8399A9" Offset="0.375"/>
                                <GradientStop Color="#FF718597" Offset="0.375"/>
                                <GradientStop Color="#FF617584" Offset="1"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>

                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Button">
                                <Grid>
                                    <VisualStateManager.VisualStateGroups>
                                        <VisualStateGroup x:Name="CommonStates">
                                            <VisualState x:Name="Normal"/>
                                            <VisualState x:Name="MouseOver">
                                                <Storyboard>
                                                    <DoubleAnimation Duration="0" Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="Opacity" To="1"/>
                                                    <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Rectangle.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)" To="#F2FFFFFF"/>
                                                    <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Rectangle.Fill).(GradientBrush.GradientStops)[2].(GradientStop.Color)" To="#CCFFFFFF"/>
                                                    <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Rectangle.Fill).(GradientBrush.GradientStops)[3].(GradientStop.Color)" To="#7FFFFFFF"/>
                                                </Storyboard>
                                            </VisualState>
                                            <VisualState x:Name="Pressed">
                                                <Storyboard>
                                                    <ColorAnimation Duration="0" Storyboard.TargetName="Background" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#FF6DBDD1"/>
                                                    <DoubleAnimation Duration="0" Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="Opacity" To="1"/>
                                                    <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Rectangle.Fill).(GradientBrush.GradientStops)[0].(GradientStop.Color)" To="#D8FFFFFF"/>
                                                    <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Rectangle.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)" To="#C6FFFFFF"/>
                                                    <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Rectangle.Fill).(GradientBrush.GradientStops)[2].(GradientStop.Color)" To="#8CFFFFFF"/>
                                                    <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Rectangle.Fill).(GradientBrush.GradientStops)[3].(GradientStop.Color)" To="#3FFFFFFF"/>
                                                </Storyboard>
                                            </VisualState>
                                            <VisualState x:Name="Disabled">
                                                <Storyboard>
                                                    <DoubleAnimation Duration="0" Storyboard.TargetName="DisabledVisualElement" Storyboard.TargetProperty="Opacity" To=".55"/>
                                                </Storyboard>
                                            </VisualState>
                                        </VisualStateGroup>
                                        <VisualStateGroup x:Name="FocusStates">
                                            <VisualState x:Name="Focused">
                                                <Storyboard>
                                                    <DoubleAnimation Duration="0" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity" To="1"/>
                                                </Storyboard>
                                            </VisualState>
                                            <VisualState x:Name="Unfocused" />
                                        </VisualStateGroup>
                                    </VisualStateManager.VisualStateGroups>
                                    <Border x:Name="Background" CornerRadius="3" Background="White" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                                        <Grid Background="{TemplateBinding Background}"  Margin="1">
                                            <Border Opacity="0"  x:Name="BackgroundAnimation" Background="#FF448DCA" />
                                            <Rectangle x:Name="BackgroundGradient" >
                                                <Rectangle.Fill>
                                                    <LinearGradientBrush StartPoint=".7,0" EndPoint=".7,1">
                                                        <GradientStop Color="#FFFFFFFF" Offset="0" />
                                                        <GradientStop Color="#F9FFFFFF" Offset="0.375" />
                                                        <GradientStop Color="#E5FFFFFF" Offset="0.625" />
                                                        <GradientStop Color="#C6FFFFFF" Offset="1" />
                                                    </LinearGradientBrush>
                                                </Rectangle.Fill>
                                            </Rectangle>
                                        </Grid>
                                    </Border>
                                    <ContentPresenter
                              x:Name="contentPresenter"
                              Content="{TemplateBinding Content}"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              Margin="{TemplateBinding Padding}"/>
                                    <Rectangle x:Name="DisabledVisualElement" RadiusX="3" RadiusY="3" Fill="#FFFFFFFF" Opacity="0" IsHitTestVisible="false" />
                                    <Rectangle x:Name="FocusVisualElement" RadiusX="2" RadiusY="2" Margin="1" Stroke="#FF6DBDD1" StrokeThickness="1" Opacity="0" IsHitTestVisible="false" />
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Grid.Resources>

            <Grid.ColumnDefinitions >
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*" MinWidth="3"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Button Style="{StaticResource newTemplate}" x:Name="Cancel" Grid.Column ="2"  Content="Cancel" VerticalAlignment="Bottom" 
				HorizontalAlignment="Right" Command="{Binding CancelCommand}"
                Visibility ="{Binding ElementName=History, Path=IsChecked, Converter={StaticResource BoolToVisibleConverter}}"/>
            <Button Style="{StaticResource newTemplate}" x:Name="Share" Grid.Column ="2"  Content="Share" VerticalAlignment="Bottom" 
				Margin="0,0,44,0"  Command="{Binding ShareCommand}"
                Visibility="{Binding ElementName=History, Path=IsChecked, Converter={StaticResource BoolToVisibleConverter}}" HorizontalAlignment="Right"/>
            <Button Style="{StaticResource newTemplate}" x:Name="UnCheckAll" Grid.Column ="0" Content="UnCheckAll" VerticalAlignment="Bottom" 
				Margin="55,0,5,0" Command="{Binding UnCheckAllCommand}"
                Visibility="{Binding ElementName=History, Path=IsChecked, Converter={StaticResource BoolToVisibleConverter}}"/>
            <Button Style="{StaticResource newTemplate}" x:Name="CheckAll" Grid.Column ="0" Content="CheckAll" VerticalAlignment="Bottom" 
				HorizontalAlignment="Left" Command="{Binding CheckAllCommand}"
                Visibility="{Binding ElementName=History, Path=IsChecked, Converter={StaticResource BoolToVisibleConverter}}"/>

            <!--When you show the History.CSV file hide all other buttons and hilite the History button.-->
            <ToggleButton x:Name="History" Grid.Column="2" Content="History" Command="{Binding HistoryCommand}"
				VerticalAlignment="Bottom" Margin="0,0,83,0" Style="{DynamicResource MyToggleButtonStyle}"
                HorizontalAlignment="Right" IsChecked="{Binding HistoryOn, Mode=TwoWay}">
                <ToggleButton.Resources>
                    <Style x:Key="MyToggleButtonStyle" TargetType="{x:Type ToggleButton}">
                        <Setter Property="Background" Value="#FF1F3B53"/>
                        <Setter Property="Foreground" Value="#FF000000"/>
                        <Setter Property="Padding" Value="3"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="BorderBrush">
                            <Setter.Value>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#FFA3AEB9" Offset="0"/>
                                    <GradientStop Color="#FF8399A9" Offset="0.375"/>
                                    <GradientStop Color="#FF718597" Offset="0.375"/>
                                    <GradientStop Color="#FF617584" Offset="1"/>
                                </LinearGradientBrush>
                            </Setter.Value>
                        </Setter>

                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Grid>
                                        <VisualStateManager.VisualStateGroups>
                                            <VisualStateGroup x:Name="CommonStates">
                                                <VisualState x:Name="Normal"/>
                                                <VisualState x:Name="MouseOver">
                                                    <Storyboard>
                                                        <DoubleAnimation Duration="0" Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="Opacity" To="1"/>
                                                    </Storyboard>
                                                </VisualState>
                                                <VisualState x:Name="Pressed">
                                                    <Storyboard>
                                                        <ColorAnimation Duration="0" Storyboard.TargetName="Background" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#FF6DBDD1"/>
                                                        <DoubleAnimation Duration="0" Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="Opacity" To="1"/>
                                                    </Storyboard>
                                                </VisualState>
                                                <VisualState x:Name="Disabled">
                                                    <Storyboard>
                                                        <DoubleAnimation Duration="0" Storyboard.TargetName="DisabledVisualElement" Storyboard.TargetProperty="Opacity" To=".55"/>
                                                    </Storyboard>
                                                </VisualState>
                                            </VisualStateGroup>
                                            <VisualStateGroup x:Name="FocusStates">
                                                <VisualState x:Name="Focused">
                                                    <Storyboard>
                                                        <DoubleAnimation Duration="0" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity" To="1"/>
                                                    </Storyboard>
                                                </VisualState>
                                                <VisualState x:Name="Unfocused" />
                                            </VisualStateGroup>
                                            <VisualStateGroup x:Name="CheckStates">
                                                <VisualState x:Name="Checked" >
                                                    <Storyboard>
                                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Background">
                                                            <EasingColorKeyFrame KeyTime="0" Value="#FF14F082"/>
                                                        </ColorAnimationUsingKeyFrames>
                                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="BackgroundAnimation">
                                                            <EasingColorKeyFrame KeyTime="0" Value="#FF14F082"/>
                                                        </ColorAnimationUsingKeyFrames>
                                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill)" Storyboard.TargetName="BackgroundGradient">
                                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                                <DiscreteObjectKeyFrame.Value>
                                                                    <SolidColorBrush Color="#FF14F082"/>
                                                                </DiscreteObjectKeyFrame.Value>
                                                            </DiscreteObjectKeyFrame>
                                                        </ObjectAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </VisualState>
                                                <VisualState x:Name="Unchecked"/>
                                                <VisualState x:Name="Indeterminate"/>
                                            </VisualStateGroup>
                                        </VisualStateManager.VisualStateGroups>
                                        <Border x:Name="Background" CornerRadius="3" Background="White" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                                            <Grid Background="{TemplateBinding Background}"  Margin="1">
                                                <Border Opacity="0"  x:Name="BackgroundAnimation" Background="#FF448DCA" />
                                                <Rectangle x:Name="BackgroundGradient" >
                                                    <Rectangle.Fill>
                                                        <LinearGradientBrush StartPoint=".7,0" EndPoint=".7,1">
                                                            <GradientStop Color="#FFFFFFFF" Offset="0" />
                                                            <GradientStop Color="#F9FFFFFF" Offset="0.375" />
                                                            <GradientStop Color="#E5FFFFFF" Offset="0.625" />
                                                            <GradientStop Color="#C6FFFFFF" Offset="1" />
                                                        </LinearGradientBrush>
                                                    </Rectangle.Fill>
                                                </Rectangle>
                                            </Grid>
                                        </Border>
                                        <ContentPresenter
            								x:Name="contentPresenter"
            								Content="{TemplateBinding Content}"
            								ContentTemplate="{TemplateBinding ContentTemplate}"
            								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
            								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
            								Margin="{TemplateBinding Padding}"/>
                                        <Rectangle x:Name="DisabledVisualElement" RadiusX="3" RadiusY="3" Fill="#FFFFFFFF" Opacity="0" IsHitTestVisible="false" />
                                        <Rectangle x:Name="FocusVisualElement" RadiusX="2" RadiusY="2" Margin="1" Stroke="#FF6DBDD1" StrokeThickness="1" Opacity="0" IsHitTestVisible="false" />
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ToggleButton.Resources>
            </ToggleButton>
        </Grid>
    </Grid>

</Window>
